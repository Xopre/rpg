### Mi bot para Telegram
### Referencia completísima: https://ebeneditos.github.io/telegram.bot/
bot_name = "El_Visionario_bot"
my_token = "1735942432:AAGHufb8Qi2Laz9Uqordq0moEMjj_TVSSJM"
my_id = "189823816"
## Ahora telegram.bot
# install.packages("telegram.bot")
library(telegram.bot)
bot <- Bot(token = my_token)
print(bot$getMe()) # Para ver si mis credenciales son correctos
updates <- bot$getUpdates()
bot$sendMessage(chat_id = my_id, text = "Funcionará?")
## Intentemos crear algo que tenga sentido:
updater <- Updater(token = my_token) # Iniciamos el mierdas este
# Mensaje que se envía al recibir el comando /start.
start <- function(bot, update){
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Hola %s!\n- Prueba a usar /dn 6.", update$message$from$first_name))
}
start_handler <- CommandHandler("start", start)
updater <- updater + start_handler # Añadimos el inicio al listado de funcionalidades
# Esta función pasa a mayúsculas los argumentos adicionales
caps <- function(bot, update, args){
if (length(args > 0L)){
text_caps <- toupper(paste(args, collapse = " "))
bot$sendMessage(chat_id = update$message$chat_id,
text = text_caps)
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/caps Hola'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("caps", caps, pass_args = TRUE) # Añadimos la funcionalidad
# Esta función lanza un dado con args caras
dn <- function(bot, update, args){
if (length(args > 0L)){
args = as.integer(args)
exit <- sample(x = 1:args, size = 1)
bot$sendMessage(chat_id = update$message$chat_id,
text = paste0("Sacaste un ", exit, " con ese dado."))
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/dn 6'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("dn", dn, pass_args = TRUE) # Añadimos la funcionalidad
updater$start_polling()
updater$start_polling()
updater$start_polling()
updater$start_polling()
updater$start_polling()
updater <- Updater(token = my_token) # Iniciamos el mierdas este
# Mensaje que se envía al recibir el comando /start.
start <- function(bot, update){
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Hola %s!\n- Prueba a usar /dn 6.", update$message$from$first_name))
}
start_handler <- CommandHandler("start", start)
updater <- updater + start_handler # Añadimos el inicio al listado de funcionalidades
# Esta función pasa a mayúsculas los argumentos adicionales
caps <- function(bot, update, args){
if (length(args > 0L)){
text_caps <- toupper(paste(args, collapse = " "))
bot$sendMessage(chat_id = update$message$chat_id,
text = text_caps)
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/caps Hola'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("caps", caps, pass_args = TRUE) # Añadimos la funcionalidad
# Esta función lanza un dado con args caras
dn <- function(bot, update, args){
if (length(args > 0L)){
args = as.integer(args)
exit <- sample(x = 1:args, size = 1)
bot$sendMessage(chat_id = update$message$chat_id,
text = paste0("Sacaste un ", exit, " con ese dado."))
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/dn 6'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("dn", dn, pass_args = TRUE) # Añadimos la funcionalidad
updater$start_polling()
## Intentemos crear algo que tenga sentido:
updater <- Updater(token = my_token) # Iniciamos el mierdas este
# Mensaje que se envía al recibir el comando /start.
start <- function(bot, update){
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Hola %s!\n- Prueba a usar /dn 6.", update$message$from$first_name))
}
start_handler <- CommandHandler("start", start)
updater <- updater + start_handler # Añadimos el inicio al listado de funcionalidades
# Esta función pasa a mayúsculas los argumentos adicionales
caps <- function(bot, update, args){
if (length(args > 0L)){
text_caps <- toupper(paste(args, collapse = " "))
bot$sendMessage(chat_id = update$message$chat_id,
text = text_caps)
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/caps Hola'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("caps", caps, pass_args = TRUE) # Añadimos la funcionalidad
# Esta función lanza un dado con args caras
dn <- function(bot, update, args){
if (length(args > 0L)){
args = as.integer(args)
exit <- sample(x = 1:args, size = 1)
bot$sendMessage(chat_id = update$message$chat_id,
text = paste0("Sacaste un ", exit, " con ese dado."))
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/dn 6'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("dn", dn, pass_args = TRUE) # Añadimos la funcionalidad
updater$start_polling()
updater <- updater + CommandHandler("dn", dn, pass_args = FALSE) # Añadimos la funcionalidad
updater$start_polling()
# Inicio
updater <- Updater(token = my_token)
library(telegram.bot)
bot <- Bot(token = my_token)
# Inicio
updater <- Updater(token = my_token)
start <- function(bot, update){
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Hola %s, polluelito!\n\tEscribe '/roba' para hacer una prueba. :D", update$message$from$first_name))
}
start_handler <- CommandHandler("start", start)
updater <- updater + start_handler # Añadimos el inicio al listado de funcionalidades
# El Emperador de los Gatos
cartas = c("Cambiar de país al oponente",
"Saltar un país",
"Atraer a un gato del oponente",
"Incluir un gato de otro país en el mazo del actual país (cogiéndolo boca-abajo y dejándola en el mazo nuevo como primera carta)",
"Acción adicional",
"Comodín de gato",
"Comodín de ingrediente",
"Posibilidad de cambio de gato acompañante",
"Robo de un ingrediente aleatorio de otro jugador o jugadora",
"Robo de dos ingredientes de abajo del mazo del país actual",
"Robo de dos Red Bulls a los demás",
"Cambio de dos ingredientes que elijas por un gato aleatorio del país anterior",
"Cambio de un gato por uno del mazo de descartes del mismo país",
"Cambio de tres ingredientes baratos en el país actual por uno caro/raro",
"Avería de la estación: otros jugadores y jugadoras no pueden comprar billetes durante un turno (colocar la avería encima de la estación durante un turno)",
"Avería de la cocina: otros jugadores y jugadoras no pueden cocinar sushi durante un turno (colocar la avería encima de la cocina durante un turno)",
"Avería del rodaje: otros jugadores y jugadoras no pueden rodar durante un turno (colocar la avería encima del escenario de rodaje durante un turno)")
n_cartas = c(1,1,
2,2,
3,3,3,
rep(4, 10),
rep(5, 10),
6,6,6,
7,7,7,
8,8,
rep(9,5),
rep(10,10),
rep(11,5),
rep(12,3),
rep(13,3),
rep(14,3),
15,16,17)
l_baraja = length(n_cartas)
baraja = sample(n_cartas, size = l_baraja, replace = FALSE)
roba_carta = function() {
robo = baraja[1]
return(cartas[robo])
assign("baraja", baraja[-1], envir = .GlobalEnv)
}
roba <- function(bot, update){
bot$sendMessage(chat_id = update$message$chat_id,
text = roba_carta())
}
updater <- updater + CommandHandler("roba", roba, pass_args = FALSE) # Añadimos la funcionalidad
updater$start_polling()
updates <- bot$getUpdates()
read.table("credentials.txt")
read.table("credentials.txt")
read.table("credentials.txt")
read.table("credentials.txt")
read.csv("credentials.txt")
read.csv("credentials.txt")
read.csv("././././Credentials/credentials.txt")
read.csv("./././Credentials/credentials.txt")
read.csv("../../../Credentials/credentials.txt")
### Mi bot para Telegram
### Referencia completísima: https://ebeneditos.github.io/telegram.bot/
credentials = read.csv("../../../Credentials/credentials.txt")
credentials
### Mi bot para Telegram
### Referencia completísima: https://ebeneditos.github.io/telegram.bot/
credentials = read.csv("../../../Credentials/credentials.txt")
credentials
bot_name = credentials["bot_name"]
bot_name = credentials["bot_name"]"El_Visionario_bot"
bot_name
credentials$"bot_name"
credentials = read.csv("../../../Credentials/credentials.txt")
bot_name = credentials$"bot_name"
my_token = credentials$"my_token"
my_id = credentials$"my_id"
library(telegram.bot)
bot <- Bot(token = my_token)
print(bot$getMe()) # Para ver si mis credenciales son correctos
## Inicio
updater <- Updater(token = my_token)
# Mensaje que se envía al recibir el comando /start.
start <- function(bot, update){
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Hola %s!\n- Prueba a usar /dn 6.", update$message$from$first_name))
}
start_handler <- CommandHandler("start", start)
updater <- updater + start_handler # Añadimos el inicio al listado de funcionalidades
# Esta función pasa a mayúsculas los argumentos adicionales
caps <- function(bot, update, args){
if (length(args > 0L)){
text_caps <- toupper(paste(args, collapse = " "))
bot$sendMessage(chat_id = update$message$chat_id,
text = text_caps)
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/caps Hola'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("caps", caps, pass_args = TRUE) # Añadimos la funcionalidad
# Esta función lanza un dado con args caras
dn <- function(bot, update, args){
if (length(args > 0L)){
args = as.integer(args)
exit <- sample(x = 1:args, size = 1)
bot$sendMessage(chat_id = update$message$chat_id,
text = paste0("Sacaste un ", exit, " con ese dado."))
} else {
bot$sendMessage(chat_id = update$message$chat_id,
text = sprintf("Esta función necesita argumentos, prueba con '/dn 6'", update$message$from$first_name))
}
}
updater <- updater + CommandHandler("dn", dn, pass_args = TRUE) # Añadimos la funcionalidad
updater$start_polling()
